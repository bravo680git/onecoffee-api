name: ONe Coffee API CI/CD
on:
  push:
    branches:
      - main
env:
  IMAGE_NAME: bravo680/onecoffee-api
  IMAGE_TAG: latest
  WEB_FOLDER: /var/www/onecoffee/api

jobs:
  Lint:
    name: Install dependencies and run ES lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up nodejs
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 21

      - name: Install dependencies and lint
        run: |
          npm i -g pnpm
          pnpm i
          pnpm lint

      - name: Notify to Telegram
        if: always()
        uses: bravo680git/tele-notify@v1
        with:
          token: ${{ secrets.TELE_TOKEN }}
          to: ${{ secrets.TELE_CHANNEL_ID }}

  BuildAndPushImage:
    name: Build docker image and push to docker hub
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push $IMAGE_NAME:$IMAGE_TAG

      - name: Notify to Telegram
        if: always()
        uses: bravo680git/tele-notify@v1
        with:
          token: ${{ secrets.TELE_TOKEN }}
          to: ${{ secrets.TELE_CHANNEL_ID }}

  DeployToEC2:
    name: SSH to EC2 and deploy new version
    runs-on: ubuntu-latest
    needs: [BuildAndPushImage]
    steps:
      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to EC2
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -tt -o StrictHostKeyChecking=no -i key.pem $SSH_USER@$SSH_HOST "
            cd $WEB_FOLDER && \

            echo '${{ secrets.ENVS }}' > .env && \
            if [ -f docker-compose.yaml ]; then \
              echo \"docker-compose.yaml exists, proceeding with deployment.\" && \
              docker compose down && \
              docker rmi -f $IMAGE_NAME:$IMAGE_TAG && \
              docker pull $IMAGE_NAME:$IMAGE_TAG && \
              docker compose up -d; \
            else \
              echo \"docker-compose.yaml not found in $WEB_FOLDER\" && \
              exit 1; \
            fi"

      - name: Notify to Telegram
        if: always()
        uses: bravo680git/tele-notify@v1
        with:
          token: ${{ secrets.TELE_TOKEN }}
          to: ${{ secrets.TELE_CHANNEL_ID }}

  RemoveDockerImage:
    name: Remove docker image on docker hub
    runs-on: ubuntu-latest
    needs: DeployToEC2
    steps:
      - name: Get docker token
        run: |
          echo "Getting token from Docker Hub..."
          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST \
            -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' \
            https://hub.docker.com/v2/users/login/ | grep -o '"token":"[^"]*' | grep -o '[^"]*$')
          echo "DOCKER_HUB_TOKEN=$TOKEN" >> $GITHUB_ENV
      - name: Remove image on docker hub
        if: success()
        run: |
          echo "Deleting image from Docker Hub..."
          curl -s -X DELETE \
            -H "Authorization: JWT ${{ env.DOCKER_HUB_TOKEN }}" \
            "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/$IMAGE_TAG"
          echo "Docker image $IMAGE_NAME:$IMAGE_TAG has been deleted successfully."
      - name: Notify to Telegram
        if: always()
        uses: bravo680git/tele-notify@v1
        with:
          token: ${{ secrets.TELE_TOKEN }}
          to: ${{ secrets.TELE_CHANNEL_ID }}
